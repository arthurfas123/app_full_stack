# docker-compose.yml

version: '3.8'

services:
  # Serviço do Frontend (React + Vite)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend_app
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT}:5173"
    volumes:
      # Monta o código-fonte local para permitir o hot-reloading
      - ./frontend:/app
      # Volume anônimo para evitar que o node_modules local sobrescreva o do container
      - /app/node_modules
    networks:
      - app-network

  # Serviço do Backend (NestJS)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend_api
    restart: unless-stopped
    ports:
      - "${BACKEND_PORT}:3000"
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      - postgres
    environment:
      # Variáveis que o NestJS usará para conectar ao banco
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_DATABASE=${POSTGRES_DB}
    networks:
      - app-network

  # Serviço do Banco de Dados (PostgreSQL)
  postgres:
    image: postgres:alpine
    container_name: postgres_db
    restart: unless-stopped
    ports:
      - "${POSTGRES_PORT}:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      # Volume nomeado para persistir os dados do banco
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network

  # Serviço do PgAdmin (Interface para gerenciar o Postgres)
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin_gui
    restart: unless-stopped
    ports:
      - "${PGADMIN_PORT}:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
    volumes:
      # Volume nomeado para persistir as configurações de servidores do PgAdmin
      - pgadmin-data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - app-network

  # Serviço do Nginx (Reverse Proxy)
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: nginx_proxy
    restart: unless-stopped
    ports:
      # A porta principal do seu projeto
      - "${NGINX_PORT}:80"
    depends_on:
      - frontend
      - backend
    networks:
      - app-network

# Define as redes e volumes
networks:
  app-network:
    driver: bridge

volumes:
  postgres-data:
  pgadmin-data: